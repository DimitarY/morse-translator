<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACEhIAAiISABICAfBiAgHwYgIB8GICAfBiAgHwYgIB8GICAfBiAg
        HwYgIB8GICAfBiAgHwYgIB8GICAfBiAgHwYgIB8GICAfBiAgHwYgIB8GHR4dAzUuLAAeHx4EHyAfBRsc
        HAEbHRwBHyAfBSAgHwYiISABISAgAAAAAAAoJCMAJyQjGygkI4ssJiW2LCYltiwmJbYsJiW2LCYltiwm
        JbYsJiW2LCYltiwmJbYsJiW2LCYltiwmJbYsJiW2LCYltiwmJbYsJiW2LCYltismJbhAMTCSm2NfUDou
        LJstJiW0cUxJZWpIRWotJiW0LCYltigkI4snJCMbKCQjAEU0MgAoJCOLWD48/4dYVP+HWFT/h1hU/4dY
        VP+HWFT/h1hU/4dYVP+HWFT/h1hU/4dYVP+HWFT/h1hU/4dYVP+HWFT/h1hU/4dYVP+HWFT/hlhU/5Rf
        W/6tbWj6kV5a/ohZVf+laGT7o2hj+4hZVf+HWFT/WD48/ygkI4pDMzEAICAfAyklJKl4UE3/r25p/65u
        af+ubWj/rm1o/65taP+ubWj/rm1o/65taP+ubmn/rm1o/65taP+ubWj/rm5p/65uaf+ubWj/rm1o/65u
        af+ubWj/rW1o/6xsZ/+ubWj/rm1o/61sZ/+tbGf/rm1o/69uaf94UE3/KSUkqSEgHwMoJCMAJyMiUTgt
        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
        NPIkISBEKCQjAAAAAAAAAAAAAAAAAAAAAAAAAAAAGxgXBi8qKbS8r7D/+enq/2ZeXvkcGRhPLyopsryv
        r//+7e7/++rr//vq6//76uv/++rr//bl5v9mXl75HBkYTy8pKLK8nZ3/+c/P/2ZXVvkcGhlPLyopsryv
        sP/56er/Zl5e+RwZGEkoJCMAAAAAAAAAAAAAAAAAAAAAAAAAAAAfHBoGLSgntJGGhv+9r6//VE1M+SAc
        G08tKCeykYaG/8Cysv++sLD/vrCw/76wsP++sLD/uq2t/1RNTPkgHBtPLSgnspF6ef+9nZz/VEhH+SAd
        HE8tKCeykYaG/72vr/9UTUz5IBwbSSgkIwAAAAAAAAAAAAAAAAAAAAAAAAAAACcjIgIoJCN3LSgnuS8q
        KbcqJiWtKCQjLigkI3UtKCe5Lyopti8qKbYvKim2Lyopti8qKbYvKim3KiYlrSgkIy4oJCN1LSgnuS8p
        KLcqJiWtKCQjLigkI3UtKCe5LyoptyomJa0oJCMsKCQjAAAAAAAAAAAAAAAAAAAAAAAAAAAAJyMiACcj
        IgMfGxoGGxgXBiQgHwUrJyUAJyMiAx8bGgYbGBcGGxgXBhsYFwYbGBcGGxgXBhsYFwYkIB8FKyclACcj
        IgMfHRsGGxoYBiQhHwUrJiUAJyMiAx8bGgYbGBcGJCAfBSomJQEoJCMAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////AAAIDgAAAAYAAAAEAAAAAgAAAAYAAAAHgBAD/4AQA/+AE
        AAHgBBAAgAAAAIAAAACAAAABgAAAgeAPP4HwHz8B+D//AIAA/4EAAP//AAD//wAA//8AAP//gAAAPwAA
        AD8AAAA/AAAAPwAAAD+EAQg///////////8=
</value>
  </data>
</root>